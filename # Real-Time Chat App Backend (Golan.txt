# Real-Time Chat App Backend (Golang + WebSocket + Redis + MongoDB)

This project is a real-time chat server built using Golang. It supports public chat broadcasting and private 1-on-1 messaging using WebSocket. Redis is used for Pub/Sub messaging, and MongoDB is used to persist message history. Authentication is handled using JWT tokens.

---

## 🚀 Features

- ✅ **Real-time messaging** with WebSockets
- ✅ **Private 1-to-1 chat** and **public chat broadcasting**
- ✅ **Redis Pub/Sub** for scalable message distribution
- ✅ **MongoDB integration** for storing chat history
- ✅ **JWT-based authentication**
- ✅ Graceful handling of client connect/disconnect
- ✅ REST API to retrieve chat history between two users

---

## 🛠️ Tech Stack

- **Golang**
- **Gin** – Web framework
- **WebSocket** – Real-time communication
- **Redis** – Pub/Sub system
- **MongoDB** – NoSQL database to store messages
- **JWT (JSON Web Tokens)** – Authentication

---

## 📁 Project Structure

chat-app/
├── auth/ # JWT token creation and validation
├── models/ # Message and user model definitions
├── mongo/ # MongoDB connection setup
├── redis/ # Redis Pub/Sub functions
├── websocket/ # WebSocket logic, client management
├── main.go # App entry point and routes

yaml
Copy
Edit

---

## 🔧 Prerequisites

Make sure the following services are running:

- Redis on `localhost:6379`
- MongoDB on `mongodb://localhost:27017`

You can use Docker for this:

```bash
docker run -d -p 6379:6379 redis
docker run -d -p 27017:27017 mongo
📦 Installation
Clone the repository

bash
Copy
Edit
git clone https://github.com/your-username/chat-app.git
cd chat-app
Install dependencies

bash
Copy
Edit
go mod tidy
Run the application

bash
Copy
Edit
go run main.go
The server will start at: http://localhost:8080

🔐 Authentication
Each WebSocket connection requires a valid JWT token passed in the Sec-WebSocket-Protocol header.

You can create tokens using your own logic or temporary auth endpoint.

WebSocket client example:

javascript
Copy
Edit
const socket = new WebSocket(
  "ws://localhost:8080/ws",
  "Bearer <your-jwt-token>"
);
📡 WebSocket Communication
Send Message (JSON Format)
json
Copy
Edit
{
  "to": "bob",            // Omit or leave empty for public message
  "content": "Hello Bob!"
}
Receive Message (JSON Format)
json
Copy
Edit
{
  "from": "alice",
  "to": "bob",
  "content": "Hello Bob!",
  "timestamp": "2025-07-16T14:00:00Z"
}
🔁 REST API
Get Chat History Between Two Users
http
Copy
Edit
GET /messages/:username
Headers:
Authorization: Bearer <token>
Returns all messages between logged-in user and the specified :username.

🧼 Graceful Handling
On connection: user is registered and mapped with their WebSocket

On disconnect: user is removed and WebSocket is cleaned up

Uses Redis channels for pub/sub and distributes messages to correct clients

🧪 Example Test Flow
Get a JWT for two users: alice and bob

Connect both via WebSocket using token

Send messages between them

Check MongoDB to confirm messages are stored

Hit /messages/bob to see chat history with bob

📝 License
This project is licensed under the MIT License.

🙋‍♂️ Author
Dishank Agrawal
Backend Developer
LinkedIn